pragma solidity >=0.4.21 <0.6.0;

import "./Verifier.sol";
import "./ERC721Mintable.sol";

// TODO define a contract call to the zokrates generated solidity contract <Verifier> or <renamedVerifier>
contract SquareVerifier is Verifier {

}

// TODO define another contract named SolnSquareVerifier that inherits from your ERC721Mintable class
contract SolnSquareVerifier is RealEstateERC721Token {

    // get an instance of the Verifier contract deployed
    SquareVerifier public squareVerifier;

    // In the constructor send in the address of the deployed Verifier contract
    constructor(address verifierAddress) public {
        //Initialize the variabe squareVerifier to the Verifier contract deployed to use that contract's functions
        // in this contract
        squareVerifier = SquareVerifier(verifierAddress);
    }

    // TODO define a solutions struct that can hold an index & an address
    struct Solutions {
        uint256 index;
        address to;
    }
    // TODO define an array of the above struct
    Solutions[] solutionsArray;
    // TODO define a mapping to store unique solutions submitted
    mapping(bytes32 => Solutions) private uniqueSolutions;
    // TODO Create an event to emit when a solution is added
    event AddedSolution(uint256 tokenId, address to);
    // TODO Create a function to add the solutions to the array and emit the event
    function addSolutions(uint256 _tokenId, address _to, bytes32 key) internal {
        Solutions memory tempSol = Solutions({index: _tokenId, to: _to});
        solutionsArray.push(tempSol);
        uniqueSolutions[key] = tempSol;
        emit AddedSolution(_tokenId, _to);
    }

    // Add a function to help with testing of adding solutions to the array Solutions[] and mapping uniqueSolutions
    // We do this by generating a key using a hash of the inputs to the verifyTx. These inputs are 
    // stored in the proof.json generated by zokrates. 
    // inputs[] array has two elements the first is the output of 3*3 which is the valid output of 
    // evaluation of our square.code program. So secret = 3 and it meets the output 9. That is 
    // we know secret = 3 which when sent to program square.code will be evaluated such that the output
    // = 9 will be true
    function testAddSolutions(address to, uint tokenId,
            uint[2] memory a,
            uint[2][2] memory b,
            uint[2] memory c,
            uint[2] memory input) public 
    {
        bytes32 key = keccak256(abi.encodePacked(a,b,c,input));
        require(uniqueSolutions[key].to == address(0),"Solution was already used");
        require(squareVerifier.verifyTx(a, b, c, input),"zkSnarks proof provided failed - check inputs");
        addSolutions(tokenId, to, key);
    }

    // TODO Create a function to mint new NFT only after the solution has been verified
    //  - make sure the solution is unique (has not been used before)
    //  - make sure you handle metadata as well as tokenSuplly
    // - The arguments sent in should match the proof.json file outputted by the zocrates generated proof
    function mint(address to, uint tokenId,
            uint[2] memory a,
            uint[2][2] memory b,
            uint[2] memory c,
            uint[2] memory input)
            public
    {
        bytes32 key = keccak256(abi.encodePacked(a,b,c,input));
        require(uniqueSolutions[key].to == address(0),"Solution was already used");
        require(squareVerifier.verifyTx(a, b, c, input),"zkSnarks proof provided failed - check inputs");
    
        addSolutions(tokenId, to, key);
        super.mint(to, tokenId);
    }   

}
  


























